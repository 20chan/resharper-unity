<?xml version="1.0" encoding="utf-8" ?>
<!-- About this file

     The root node can be anything. TokenGenerator doesn't care. It uses whatever the root node is,
     and then looks for `BaseTokenNodeTypeIndex`, `TokenTypeNamespace` and `TokenTypeClass` child elements.
     It will also look for `Import` elements which are used to add arbitrary using namespaces.
     It will then loop over all other children of the root node, and treat them like sections. Each
     child node must have a `NodeType` attribute, and optionally a `TokenElement` attribute. If there
     is no `TokenElement` attribute, the token is generated as an instance of the `NodeType` class. If
     there is a `TokenElement` attribute, then a new class is generated for the node type and the element.
     There is no real difference between the two - identification is carried out based on reference equality
     to a singleton instance and and generated types are private. The only difference is the derived classes
     will have a smaller footprint - no text or node type fields. But that's negligible. On the flip side,
     there will be fewer classes. Micro-optimisation swings and roundabouts.
     When generating, TokenGenerator will look for `name` and `representation` attributes.
-->
<ShaderLabTokens>

  <!-- Default is 1000 -->
  <BaseTokenNodeTypeIndex>1000</BaseTokenNodeTypeIndex>
  <TokenTypeNamespace>JetBrains.ReSharper.Plugins.Unity.Psi.ShaderLab.Parsing</TokenTypeNamespace>
  <TokenTypeClass>ShaderLabTokenType</TokenTypeClass>

  <FragmentDelimiters NodeType="FixedTokenNodeType">
    <FragmentDelimiter name="CG_PROGRAM" representation="CGPROGRAM" /> 
    <!-- This doesn't seem to be documented -->
    <FragmentDelimiter name="CG_INCLUDE" representation="CGINCLUDE" />
    <FragmentDelimiter name="CG_END" representation="ENDCG" />
  </FragmentDelimiters>

  <Tokens NodeType="FixedTokenNodeType">
    <Token name="LPAREN" representation="(" />
    <Token name="RPAREN" representation=")" />
    <Token name="LBRACK" representation="[" />
    <Token name="RBRACK" representation="]" />
    <Token name="LBRACE" representation="{" />
    <Token name="RBRACE" representation="}" />
    <Token name="COMMA" representation="," />
    <Token name="DOT" representation="." />
    <Token name="EQUALS" representation="=" />
    <Token name="PLUS" representation="+" />
    <Token name="MULTIPLY" representation="*" />
    
    <Token name="BAD_CHARACTER" representation="💩" />
  </Tokens>

  <!-- TODO: Should these be a keyword or just a fixed token? -->
  <Commands NodeType="KeywordTokenNodeType">
    <Command name="SHADER_KEYWORD" representation="Shader" />
    <Command name="PROPERTIES_KEYWORD" representation="Properties" />
    <Command name="SUB_SHADER_KEYWORD" representation="SubShader" />
    <Command name="FALLBACK_KEYWORD" representation="Fallback" />
    <Command name="CUSTOM_EDITOR_KEYWORD" representation="CustomEditor" />
    <Command name="DEPENDENCY_KEYWORD" representation="Dependency" />
  </Commands>

  <PropertyTypeKeywords NodeType="KeywordTokenNodeType">
    <Keyword name="COLOR_KEYWORD" representation="Color" />
    <Keyword name="CUBE_KEYWORD" representation="Cube" />
    <Keyword name="FLOAT_KEYWORD" representation="Float" />
    <Keyword name="INT_KEYWORD" representation="Int" />
    <Keyword name="RANGE_KEYWORD" representation="Range" />
    <Keyword name="TEXTURE_2D_KEYWORD" representation="2D" />
    <Keyword name="TEXTURE_3D_KEYWORD" representation="3D" />
    <Keyword name="VECTOR_KEYWORD" representation="Vector" />
  </PropertyTypeKeywords>

  <Keywords NodeType="KeywordTokenNodeType">
    <Keyword name="OFF_KEYWORD" representation="Off" />
  </Keywords>
</ShaderLabTokens>
