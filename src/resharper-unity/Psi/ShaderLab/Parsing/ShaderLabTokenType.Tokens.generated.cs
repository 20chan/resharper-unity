//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by TokenGenerator
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.Text;
using JetBrains.ReSharper.Psi;
using JetBrains.ReSharper.Psi.Parsing;

namespace JetBrains.ReSharper.Plugins.Unity.Psi.ShaderLab.Parsing
{
  public partial class ShaderLabTokenType
  {
    //FragmentDelimiters
    public const int CG_PROGRAM_NODE_TYPE_INDEX = 1000;
    public static readonly TokenNodeType CG_PROGRAM = new FixedTokenNodeType("CG_PROGRAM", CG_PROGRAM_NODE_TYPE_INDEX, representation: "CGPROGRAM");
    public const int CG_INCLUDE_NODE_TYPE_INDEX = 1001;
    public static readonly TokenNodeType CG_INCLUDE = new FixedTokenNodeType("CG_INCLUDE", CG_INCLUDE_NODE_TYPE_INDEX, representation: "CGINCLUDE");
    public const int CG_END_NODE_TYPE_INDEX = 1002;
    public static readonly TokenNodeType CG_END = new FixedTokenNodeType("CG_END", CG_END_NODE_TYPE_INDEX, representation: "ENDCG");

    //Tokens
    public const int LPAREN_NODE_TYPE_INDEX = 1003;
    public static readonly TokenNodeType LPAREN = new FixedTokenNodeType("LPAREN", LPAREN_NODE_TYPE_INDEX, representation: "(");
    public const int RPAREN_NODE_TYPE_INDEX = 1004;
    public static readonly TokenNodeType RPAREN = new FixedTokenNodeType("RPAREN", RPAREN_NODE_TYPE_INDEX, representation: ")");
    public const int LBRACK_NODE_TYPE_INDEX = 1005;
    public static readonly TokenNodeType LBRACK = new FixedTokenNodeType("LBRACK", LBRACK_NODE_TYPE_INDEX, representation: "[");
    public const int RBRACK_NODE_TYPE_INDEX = 1006;
    public static readonly TokenNodeType RBRACK = new FixedTokenNodeType("RBRACK", RBRACK_NODE_TYPE_INDEX, representation: "]");
    public const int LBRACE_NODE_TYPE_INDEX = 1007;
    public static readonly TokenNodeType LBRACE = new FixedTokenNodeType("LBRACE", LBRACE_NODE_TYPE_INDEX, representation: "{");
    public const int RBRACE_NODE_TYPE_INDEX = 1008;
    public static readonly TokenNodeType RBRACE = new FixedTokenNodeType("RBRACE", RBRACE_NODE_TYPE_INDEX, representation: "}");
    public const int COMMA_NODE_TYPE_INDEX = 1009;
    public static readonly TokenNodeType COMMA = new FixedTokenNodeType("COMMA", COMMA_NODE_TYPE_INDEX, representation: ",");
    public const int EQUALS_NODE_TYPE_INDEX = 1010;
    public static readonly TokenNodeType EQUALS = new FixedTokenNodeType("EQUALS", EQUALS_NODE_TYPE_INDEX, representation: "=");
    public const int PLUS_NODE_TYPE_INDEX = 1011;
    public static readonly TokenNodeType PLUS = new FixedTokenNodeType("PLUS", PLUS_NODE_TYPE_INDEX, representation: "+");
    public const int MULTIPLY_NODE_TYPE_INDEX = 1012;
    public static readonly TokenNodeType MULTIPLY = new FixedTokenNodeType("MULTIPLY", MULTIPLY_NODE_TYPE_INDEX, representation: "*");
    public const int BAD_CHARACTER_NODE_TYPE_INDEX = 1013;
    public static readonly TokenNodeType BAD_CHARACTER = new FixedTokenNodeType("BAD_CHARACTER", BAD_CHARACTER_NODE_TYPE_INDEX, representation: "💩");

    private const int LAST_GENERATED_TOKEN_TYPE_INDEX = 1014;  }
}
