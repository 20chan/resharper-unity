<?xml version="1.0" encoding="utf-8"?>
<Errors language="C#" configurableSeverityImplementationLanguage="CSHARP"
        baseClass="CSharpUnityHighlightingBase">
  
  <Usings>
    JetBrains.ReSharper.Psi.CSharp.Tree;
    JetBrains.ReSharper.Plugins.Unity.Daemon.Stages.Highlightings;
    JetBrains.ReSharper.Plugins.Unity.CSharp.Daemon.Errors
  </Usings>
  
  <!-- Register the configurable severities
       Can take a child Tag or Group element
       * Tag is configurable severity without a group
       * Group[@name] specifies the name of the group, expects child Tag elements
       * Tag[@name] is the HIGHLIGHTING_ID of a warning/error. It is treated as a string
         literal and quoted. It is referenced in Warning[@configurableSeverity]
       * Tag[@default] is the default severity. Just the enum value, no leading "Severity."
       * Tag[@type] is optional. Default is "simple". Other options include "global",
         "localAndGlobal"
       * Tag[@externalName] is also the HIGHLIGHTING_ID, but is treated verbatim, rather
         than as a string literal. This allows for using the fully qualified name of the
         HIGHLIGHTING_ID
       * Tag[@alternatives] the value of RegisterConfigurableSeverityAttribute.AlternativeIDs
       * Tag/Title is the short title of the severity, usually matching the highlight's MESSAGE
       * Tag/Description is a longer description, shown in the options pages
       * Tag/CompoundItemName only used if Tag[@type] is missing or "simple". Sets the compound
         item name
       -->
  <SeverityConfiguration>
    <Group name="UnityHighlightingGroupIds.Unity">
      <Tag externalName="RedundantSerializeFieldAttributeWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Redundant 'SerializeField' attribute</Title>
        <Description>Unity will ignore the 'SerializeField' attribute if a field is also marked with the 'NonSerialized' attribute</Description>
      </Tag>
      
      <Tag externalName="DuplicateEventFunctionWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Event function with the same name is already declared</Title>
        <Description>Event function with the same name is already declared</Description>
      </Tag>
      
      <Tag externalName="IncorrectMonoBehaviourInstantiationWarning.HIGHLIGHTING_ID" default="WARNING">
        <Title>MonoBehaviours must be instantiated with 'GameObject.AddComponent&lt;T&gt;()' instead of 'new'</Title>
        <Description>Instantiating a MonoBehaviour based class with 'new' does not attach it to a GameObject, and Unity will not invoke any event functions. Create a new instance using 'GameObject.AddComponent&lt;T&gt;()</Description>
      </Tag>
      
      <Tag externalName="IncorrectScriptableObjectInstantiationWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>ScriptableObjects must be instantiated with 'ScriptableObject.CreateInstance&lt;T&gt;()' instead of 'new'</Title>
        <Description>Instantiating a ScriptableObject base class with 'new' means that Unity will not call any event functions. Use 'ScriptableObject.CreateInstance&lt;T&gt;()' instead.</Description>
      </Tag>

      <Tag externalName="InvalidParametersWarning.HIGHLIGHTING_ID" default="WARNING">
        <Title>Incorrect method parameters</Title>
        <Description>Incorrect parameters for expected method signature.</Description>
        <CompoundItemName>Incorrect method signature</CompoundItemName>
      </Tag>

      <Tag externalName="InvalidReturnTypeWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Incorrect return type</Title>
        <Description>Incorrect return type for expected method signature.</Description>
        <CompoundItemName>Incorrect method signature</CompoundItemName>
      </Tag>
      
      <Tag externalName="InvalidStaticModifierWarning.HIGHLIGHTING_ID" default="WARNING">
        <Title>Incorrect or missing static modifier</Title>
        <Description>Incorrect or missing static modifier for expected method signature.</Description>
        <CompoundItemName>Incorrect method signature</CompoundItemName>
      </Tag>
      
      <Tag externalName="InvalidTypeParametersWarning.HIGHLIGHTING_ID" default="WARNING">
        <Title>Incorrect type parameters</Title>
        <Description>Incorrect type parameters for expected method signature.</Description>
        <CompoundItemName>Incorrect method signature</CompoundItemName>
      </Tag>
    </Group>
  </SeverityConfiguration>
  
  <!-- Warning, Error, Info or LocalAndGlobal
       * @name - name of the highlighting. Suffix based on parent element is automatically added
       * @configurableSeverity - the value of HIGHLIGHTING_ID. Treated as a string literal and quoted
       * @externalConfigurableSeverity - the value of HIGHLIGHTING_ID. Treated verbatim to refer to code
       * @staticGroup - define the static group this highlight belongs to. Must have been registered
         in /Errors/StaticSeverityGroups
       * ./Parameter - multiple elements for constructor parameters. Requires the @name and @type attributes.
       * ./Parameter[@name] is capitalised and turned into a public property
       * ./Message[@value] the string format template for the message
       * ./Message/Argument multiple code snippets to be used as the arguments to string.Format
       * ./Range code snippt to be the return value of CalculateRange()
       * ./Behavour - NOTE THE SPELLING!
       * ./Behavour[@attributeID] (optional) defines ConfigurableSeverityHighlightingAttribute.AttributeId
       * ./Behavour[@overlapResolvePolicy] (optional) defines ConfigurableSeverityHighlightingAttribute.OverlapResolve
       * ./Behavour/QuickFix multiple elements listing the types that will implement a quick fix
         for this highlight. Only used when the file is processed in QUICKFIX mode (default is
         to use ERROR mode)
       -->
  <Warning name="RedundantSerializeFieldAttribute" configurableSeverity="Unity.RedundantSerializeFieldAttribute">
    <Parameter type="IAttribute" name="attribute" />
    <Message value="Redundant 'SerializeField' attribute" />
    <Range>Attribute.GetHighlightingRange()</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE" />
  </Warning>
  
  <Warning name="DuplicateEventFunction" configurableSeverity="Unity.DuplicateEventFunction">
    <Parameter type="IMethodDeclaration" name="methodDeclaration" />
    <Message value="Event function with the same name is already declared" />
    <Range>CSharpErrorUtil.GetMethodNameAndParametersHighlightingRange(MethodDeclaration)</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>

  <Warning name="IncorrectMonoBehaviourInstantiation" configurableSeverity="Unity.IncorrectMonoBehaviourInstantiation">
    <Parameter type="IObjectCreationExpression" name="creationExpression" />
    <Message value="MonoBehaviours must be instantiated with 'GameObject.AddComponent&lt;T&gt;()' instead of 'new'" />
    <Range>CreationExpression.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>
  
  <Warning name="IncorrectScriptableObjectInstantiation" configurableSeverity="Unity.IncorrectScriptableObjectInstantiation">
    <Parameter type="IObjectCreationExpression" name="creationExpression" />
    <Message value="ScriptableObjects must be instantiated with 'ScriptableObject.CreateInstance&lt;T&gt;()' instead of 'new'" />
    <Range>CreationExpression.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>

  <Warning name="InvalidParameters" configurableSeverity="Unity.InvalidParameters">
    <Parameter type="IMethodDeclaration" name="methodDeclaration" />
    <Parameter type="MethodSignature" name="expectedMethodSignature" isValid="skip" />
    <Message value="Incorrect method parameters. Expected '({0})'">
      <Argument>ExpectedMethodSignature.Parameters.GetParameterList()</Argument>
    </Message>
    <Range>CSharpErrorUtil.GetParametersHighlightingRange(MethodDeclaration)</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>

  <Warning name="InvalidReturnType" configurableSeverity="Unity.InvalidReturnType">
    <Parameter type="IMethodDeclaration" name="methodDeclaration" />
    <Parameter type="MethodSignature" name="expectedMethodSignature" isValid="skip" />
    <Message value="Incorrect return type. Expected '{0}'">
      <Argument>ExpectedMethodSignature.GetReturnTypeName()</Argument>
    </Message>
    <Range>CSharpErrorUtil.GetReturnTypeHighlightingRange(MethodDeclaration)</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>

  <Warning name="InvalidStaticModifier" configurableSeverity="Unity.InvalidStaticModifier">
    <Parameter type="IMethodDeclaration" name="methodDeclaration" />
    <Parameter type="MethodSignature" name="expectedMethodSignature" isValid="skip" />
    <Message value="{0}">
      <Argument>MethodDeclaration.IsStatic ? "Incorrect static modifier" : "Missing static modifier"</Argument>
    </Message>
    <Range>CSharpErrorUtil.GetStaticModifierOrMethodNameHighlightingRange(MethodDeclaration)</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>
  
  <Warning name="InvalidTypeParameters" configurableSeverity="Unity.InvalidTypeParameters">
    <Parameter type="IMethodDeclaration" name="methodDeclaration" />
    <Parameter type="MethodSignature" name="expectedMethodSignature" isValid="skip" />
    <Message value="Incorrect type parameters" />
    <Range>CSharpErrorUtil.GetTypeParametersOrMethodNameHighlightingRange(MethodDeclaration)</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>
</Errors>