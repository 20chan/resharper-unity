<?xml version="1.0" encoding="utf-8"?>
<Errors language="C#" configurableSeverityImplementationLanguage="SHADERLAB" baseClass="ShaderLabHighlightingBase">

  <Usings>
    JetBrains.ReSharper.Plugins.Unity.ShaderLab.Psi.Tree
  </Usings>

  <StaticSeverityGroups>
    <Group name="ShaderLab Errors" key="ShaderLabErrors" />
    <Group name="ShaderLab Warnings" key="ShaderLabWarnings" />
  </StaticSeverityGroups>

  <Error name="ShaderLabSyntax" staticGroup="ShaderLabErrors">
    <Parameter type="string" name="text"/>
    <Parameter type="DocumentRange" name="documentRange"/>
    <Message value="{0}">
      <Argument>Text</Argument>
    </Message>
    <Range>DocumentRange</Range>
    <Behavour attributeID="ERROR" overlapResolvePolicy="ERROR"/>
  </Error>
  
  <Error name="ShaderLabPreprocessorDirective" staticGroup="ShaderLabErrors">
    <Parameter type="IPpErrorDirective" name="directiveNode" />
    <Parameter type="string" name="text" />
    <Message value="{0}">
      <Argument>Text</Argument>
    </Message>
    <Range>DirectiveNode.Directive.GetHighlightingRange()</Range>
    <Behavour attributeID="ERROR" overlapResolvePolicy="ERROR" />
  </Error>
  
  <Warning name="ShaderLabSwallowedPreprocessorChar" staticGroup="ShaderLabWarnings">
    <Parameter type="ITokenNode" name="swallowedToken" />
    <Message value="Ignored character. Consider inserting new line for clarity" />
    <Range>SwallowedToken.GetHighlightingRange()</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE" />
  </Warning>
  
  <Warning name="ShaderLabPreprocessorDirective" staticGroup="ShaderLabWarnings">
    <Parameter type="IPpWarningDirective" name="directiveNode" />
    <Parameter type="string" name="text" />
    <Message value="{0}">
      <Argument>Text</Argument>
    </Message>
    <Range>DirectiveNode.Directive.GetHighlightingRange()</Range>
    <Behavour attributeID="WARNING" overlapResolvePolicy="WARNING" />
  </Warning>
</Errors>