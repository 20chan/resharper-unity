def backendGroup = 'backend'

import org.apache.tools.ant.taskdefs.condition.Os

import java.util.regex.Matcher
import java.util.regex.Pattern

ext.isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
ext.backend = new BackendHelper("..", logger)
ext.extraMSBuildArgs = []

ext.artifactDefs = []

class MSBuildTask extends DefaultTask {
    @InputFile
    def File buildFile

    // Set msbuild verbosity based on gradle log level

    @TaskAction
    def build() {
        project.backend.ReportProgress("Building $buildFile ($project.BuildConfiguration)")

        def arguments = [ buildFile, "/p:Configuration=$project.BuildConfiguration", "/p:Version=$project.version", '/v:minimal', '/nologo' ]
        arguments.addAll(project.extraMSBuildArgs)
        project.exec {
            executable = findMSBuildPath()
            args = arguments
        }
    }

    def findMSBuildPath() {
        if (project.ext.has('msbuildPath')) {
            logger.lifecycle("msbuildPath (cached): $project.msbuildPath")
            return project.msbuildPath
        }

        project.ext.msbuildPath = project.isWindows ? findMSBuildPathWindows() : findMSBuildPathUnix()
        logger.lifecycle "msbuildPath: $project.msbuildPath"
        return project.msbuildPath
    }

    def findMSBuildPathWindows() {
        def stdout = new ByteArrayOutputStream()
        project.exec {
            executable = project.file(backend.repositoryRoot, "tools\\vswhere.exe")
            assert executable.isFile()
            args = [ "-latest", "-products", "*", "-requires", "Microsoft.Component.MSBuild", "-property", "installationPath" ]
            standardOutput = stdout
        }

        def buildToolsDir = project.file(stdout.toString().trim())
        assert buildToolsDir.isDirectory()

        return project.file(buildToolsDir, 'MSBuild\\15.0\\Bin\\MSBuild.exe')
    }

    def findMSBuildPathUnix() {
        def stdout = new ByteArrayOutputStream()
        project.exec {
            executable = 'which'
            args = [ 'msbuild' ]
            standardOutput = stdout
        }

        return project.file(stdout.toString().trim())
    }
}

class RestorePackagesTask extends DefaultTask {
    @InputFile
    def File packagesFile

    @TaskAction
    def restore() {
        if (project.SkipNuGetRestore) {
            logger.lifecycle('SkipNuGetRestore=true, skipping restore')
            return
        }

        project.backend.ReportProgress("Restoring packages for $packagesFile")

        def restoreArguments = [ 'restore' ]
        if (project.PackageSource != null) {
            restoreArguments << '--source' << 'https://api.nuget.org/v3/index.json'
            restoreArguments << '--source' << 'https://www.myget.org/F/jetbrains-rider-sdk-snapshots/api/v3/index.json'
            restoreArguments << '--source' << project.PackageSource
        }
        restoreArguments.addAll project.extraMSBuildArgs
        restoreArguments << packagesFile
        project.exec {
            executable = 'dotnet'
            args = restoreArguments
        }
    }
}

class ArtifactDef {
    String id // resharper/rider
    File generatedNuspecPath
}

class BackendHelper {
    File repositoryRoot
    File unityRoot
    File backendRoot
    File solution
    File unityPluginSolution
    File riderTestsProject // used to build RiderOnly configurations
    Logger logger

    BackendHelper(String repoRoot, Logger logger) {
        repositoryRoot = new File(repoRoot).canonicalFile
        assert repositoryRoot.isDirectory()

        backendRoot = new File(repositoryRoot, 'resharper')
        assert backendRoot.isDirectory()

        unityRoot = new File(repositoryRoot, 'unity')
        unityPluginSolution = new File(unityRoot, 'JetBrains.Rider.Unity.Editor/JetBrains.Rider.Unity.Editor.sln')

        solution = new File(backendRoot, 'src/resharper-unity.sln')
        assert solution.isFile()

        riderTestsProject = new File(backendRoot, 'test/src/tests.rider.csproj')
        assert riderTestsProject.isFile()

        this.logger = logger
    }

    void ReportProgress(String message) {
        ServiceMessage("progressMessage", message)
    }

    void ServiceMessage(String type, String message){
        logger.lifecycle("##teamcity[$type '$message']")
    }
}

task findLocalRiderSDKVersion {
    group backendGroup
    description 'Find version of local Rider SDK version'

    onlyIf { PackageSource != null }

    doLast {
        def directory = file(PackageSource)
        assert directory.isDirectory()

        def packageName = 'JetBrains.Rider.SDK'
        def escapedPackageName = Pattern.quote(packageName)

        logger.lifecycle("Looking for package $packageName in $directory")

        def packageVersion = directory.listFiles().collect { File f ->
            if (f.isFile()) {
                logger.trace(f.name)

                def match = (f.name =~ /^(?i)$escapedPackagedName\.((\d+\.)+\d+((-eap|-snapshot)\d+(d?)(pre|internal)?)?)\.nupkg\u0024/)
                if (math.matches()) {
                    return match[0][1]
                }
            }

            return null
        }.find { String s -> s != null }

        assert packageVersion != null : 'No files found matching the package version regex'

        extraMSBuildArgs << "/p:RiderSDKVersion=$packageVersion"
    }
}

task prepareNuspec() {
    group = backendGroup
    description = 'Creates platform and configuration specific .nuspec file.'

    doLast {
        def buildTypes = [ ]
        if (!RiderOnly){            
            buildTypes.add("resharper")
        }

        buildTypes.each { bt ->
            def artifact = new ArtifactDef(id: bt)

            def nuspecPath = new File(backend.solution.parent, "resharper-unity/resharper-unity.${bt}.nuspec")
            assert nuspecPath.isFile()

            def platform = isWindows ? "Windows" : "Unix"
            artifact.generatedNuspecPath = new File(backend.solution.parent, "resharper-unity/resharper-unity.${bt}.${BuildConfiguration}.${platform}.nuspec")

            copy {
                from nuspecPath.parent
                into nuspecPath.parent

                include(nuspecPath.name)
                rename(nuspecPath.name, artifact.generatedNuspecPath.name)

                /* $2 match is -rider suffix or nothing
                 * <version>1.0.0-rider</version> -> <version>2.0.0.500</version>
                 * <version>1.0.0</version> -> <version>2.0.0.500</version> */
                filter { line -> line.replaceAll(/\<version\>(\d+\.)+\d+(.*)\<\\/version\>/, "<version>$version\$2</version>")}

                /* <file src="..\..\build\resharper-unity.rider\bin\Release\net452\JetBrains.ReSharper.Plugins.Unity.dll" target="DotFiles" />
                 * to
                 * <file src="..\..\build\resharper-unity.rider\bin\$Configuration\net452\JetBrains.ReSharper.Plugins.Unity.dll" target="DotFiles" /> */
                filter { line -> line.replaceAll(/(\<file src="[^ \/]*)Release([^\/]*)/, "\$1$BuildConfiguration\$2")}

                if (!isWindows){
                    // Nuget on mono doesn't like the '../..', so fix up the path, relative to current dir
                    filter { line -> line.replaceAll(/\.\.\\\.\./, Matcher.quoteReplacement(backend.backendRoot.path))}

                    // fixup DOS-style slashes
                    filter { line -> line.replaceAll("\\\\", "/")}
                }
            }

            project.artifactDefs.add(artifact)
        }
    }
}

task restoreUnityEditorPluginPackages(type: RestorePackagesTask) {
    group backendGroup
    description 'Restores packages for Unity Editor plugin'
    dependsOn findLocalRiderSDKVersion
    packagesFile backend.unityPluginSolution
}

task restoreBackendPluginPackages(type: RestorePackagesTask) {
    group backendGroup
    description 'Restores packages for backend plugin'
    dependsOn findLocalRiderSDKVersion
    packagesFile backend.solution
}

task buildUnityEditorPlugin(type: MSBuildTask) {
    dependsOn restoreUnityEditorPluginPackages
    group backendGroup
    description 'Builds Unity Editor plugin assemblies'
    buildFile = backend.unityPluginSolution
}

task buildBackendPlugin(type: MSBuildTask) {
    dependsOn restoreBackendPluginPackages, buildUnityEditorPlugin
    group backendGroup
    description 'Builds ReSharper plugin assemblies'
    buildFile = RiderOnly ? backend.riderTestsProject : backend.solution
}

task packReSharperPlugin {
    dependsOn buildBackendPlugin, prepareNuspec
    group = backendGroup
    description = 'Packs resulting DLLs into a NuGet package which is an R# extension.'

    doLast {
        artifactDefs.each { ArtifactDef artifact ->
            assert artifact.generatedNuspecPath.isFile()
            logger.lifecycle(artifact.generatedNuspecPath.name)

            backend.ReportProgress("Building and Packaging: $artifact.id")
            def outputDir = new File(backend.backendRoot, "build/resharper-unity.$artifact.id/bin/$BuildConfiguration")
            String packExecutable
            def packArguments = []

            if (isWindows) {
                def csprojPath = new File(backend.solution.parent, "resharper-unity/resharper-unity.${artifact.id}.csproj")

                packExecutable = "dotnet"
                packArguments = ["pack", csprojPath.path, "/p:Configuration=$BuildConfiguration", "/p:NuspecFile=$artifact.generatedNuspecPath.path", "--no-build"]
            }
            else {
                // todo: sudo apt-get install nuget may be required on linux for this to work
                packExecutable = "nuget"
                packArguments = ["pack", artifact.generatedNuspecPath, "-OutputDirectory", outputDir]
            }

            def packResult = exec {
                executable = packExecutable
                args = packArguments
                ignoreExitValue = true
            }

            artifact.generatedNuspecPath.delete()
            assert packResult.exitValue == 0

            def resultingNupkgs = outputDir.listFiles(new FilenameFilter() {
                @Override
                boolean accept(File dir, String name) {
                    return name.toLowerCase().endsWith(".nupkg")
                }
            })

            assert resultingNupkgs.length > 0 : "$outputDir has no .nupkg files"
            backend.ServiceMessage("publishArtifacts", "$outputDir\\*.nupkg")
        }
    }
}

task buildBackend {
    dependsOn packReSharperPlugin
    group = backendGroup
    description = 'Builds .NET part of the plugin.'
    doLast {
        backend.ServiceMessage("buildNumber", "$version")
    }
}
