// TODO: NoBuild
// TODO: RunIde

def backendGroup = 'backend'

import org.apache.tools.ant.taskdefs.condition.Os

import java.util.regex.Pattern

class BackendHelper {
    File repositoryRoot
    File srcDir
    File solution
    Logger logger

    BackendHelper(String repositoryRoot, String srcRelative, String solutionRelativeToSrc, Logger logger) {
        this.repositoryRoot = new File(repositoryRoot)
        this.srcDir = new File(repositoryRoot, srcRelative)
        this.solution = new File(this.srcDir, solutionRelativeToSrc)
        this.logger = logger
    }

    // relies on pretty simplistic structure (e.g. no attributes)
    void PatchXmlNodeValue(File file, String nodeName, String value) {
        logger.lifecycle("- ${file.name}: $nodeName -> $value")
        PatchFile(file, /(\s*<$nodeName>)[^<]*(<\\/$nodeName>)\s*/, "\$1$value\$2")
    }

    void PatchFile(File file, String regex, String replacement) {
        def pattern = Pattern.compile(regex)
        logger.lifecycle("- ${file.name}: $pattern -> $replacement")

        def lines = file.readLines()
        def replaced = lines.collect {
            String line -> pattern.matcher(line).replaceAll(replacement)
        }

        def fullText = replaced.join("\n")
        file.withOutputStream {
            OutputStream os ->
                os.withWriter {
                    Writer w -> w.write(fullText)
                }
                os.flush()
                os.close()
        }

        // TODO: notify if no matches found
    }

    void ReportProgress(String message) {
        logger.lifecycle("##teamcity[progressMessage '$message']")
    }
}

ext.backend = new BackendHelper("..", "resharper/", "src/resharper-unity.sln", logger)
ext.isWindows = Os.isFamily(Os.FAMILY_WINDOWS)

task updateDirectoryBuildProps {
    group = backendGroup
    description = 'Parses SDK version from Source parameter and updates .props file accordingly. Does nothing if the Source is not set.'

    doLast {
        if (Source == null) {
            logger.lifecycle("Explict SDK version is not set, skipping .props modification")
            return
        }
        // Get package version from folder
        def directory = new File(Source as String)
        def packageName = "JetBrains.Rider.SDK"
        def escapedPackagedName = Pattern.quote(packageName)
        logger.lifecycle("Looking for package $packageName among items:")
        String sdkPackageVersion = directory.listFiles().collect {
            File f ->
                if (f.isDirectory())
                    return null

                logger.trace(f.name)
                def match = (f.name =~ /^$escapedPackagedName\.((\d+\.)+\d+((-eap|-snapshot)\d+(internal)?)?)\.nupkg\u0024/)
                if (!match.matches())
                    return null

                def matchValue = match[0][1]
                return matchValue
        }.find { String s -> s != null }

        if (sdkPackageVersion == null) {
            throw new InvalidUserDataException("Package $packageName was not found in folder $directory")
        }

        // Set Rider SDK version
        def buildPropsFile = new File(backend.srcDir, "Directory.Build.props")
        def sdkPropertyName = "RiderSDKVersion"

        logger.lifecycle("Setting versions:")
        logger.lifecycle("JetBrains.Rider.SDK -> $sdkPackageVersion")
        logger.lifecycle("JetBrains.Rider.SDK.Tests -> $sdkPackageVersion")
        logger.lifecycle("- ${buildPropsFile.name}: $sdkPropertyName -> $sdkPackageVersion")
        backend.PatchXmlNodeValue(buildPropsFile, sdkPropertyName, sdkPackageVersion)
    }
}

task restorePackages {
    dependsOn updateDirectoryBuildProps
    group = backendGroup
    description = 'Restores NuGet packages for the solution. Adds Source as package source if provided.'

    doLast {
        if (!backend.solution.isFile())
            throw new FileNotFoundException(backend.solution.toString())

        backend.ReportProgress("Restoring packages")
        def restoreArguments = Source == null ? ["restore", backend.solution] : ["restore", "--source", "https://api.nuget.org/v3/index.json", "--source", Source, backend.solution]
        exec {
            commandLine = ["dotnet"]
            args = restoreArguments
        }
    }
}

task updatePackagingPropsVersion {
    group = backendGroup
    description = 'Updates packaging.props file with BuildCounter value.'

    doLast {
        def packagingPropsFile = new File(backend.repositoryRoot, "Packaging.props")
        if (!packagingPropsFile.isFile())
            throw new FileNotFoundException(packagingPropsFile.toString())

        backend.PatchXmlNodeValue(packagingPropsFile, "Version", version.toString())
        backend.PatchXmlNodeValue(packagingPropsFile, "AssemblyVersion", version.toString())
    }
}

task buildBackend {
    dependsOn restorePackages, updatePackagingPropsVersion
    group = backendGroup
    description = 'Builds .NET part of the plugin.'

    doLast {
        logger.lifecycle("running buildBackend")
    }
}