ext.modelDir = new File(repoRoot, "rider/protocol/src/main/kotlin/model")

// TODO: Think about adding an msbuild task for rdgen

task generateRiderModel(type: tasks.getByName('rdgen').class) {
    def csOutput = new File(repoRoot, "resharper/src/resharper-unity/Rider/RdUnityProtocol")
    def ktOutput = new File(repoRoot, "rider/src/main/kotlin/com/jetbrains/rider/protocol/RdUnityProtocol")

    params {
        verbose = true
        classpath "$rdLibDirectory/rider-model.jar"
        sources "$modelDir/rider"
        hashFolder = 'build/rdgen/rider'
        packages = "model.rider"

        generator {
            language = "kotlin"
            transform = "asis"
            root = "com.jetbrains.rider.model.nova.ide.IdeRoot"
            namespace = "com.jetbrains.rider.model"
            directory = "$ktOutput"
        }

        generator {
            language = "csharp"
            transform = "reversed"
            root = "com.jetbrains.rider.model.nova.ide.IdeRoot"
            namespace = "JetBrains.Rider.Model"
            directory = "$csOutput"
        }

    }
}

task generateEditorPluginModel(type: tasks.getByName('rdgen').class) {
    params {
        verbose = true
        classpath "$rdLibDirectory/rider-model.jar"
        hashFolder = "build/rdgen/editorPlugin"
        sources "$modelDir/editorPlugin"
        packages = "model.editorPlugin"
    }
}

task generateModel {
    group = 'protocol'
    description = 'Generates protocol models.'
    dependsOn generateRiderModel, generateEditorPluginModel
}

// TODO: The dotnet world should depend on this, too
jar.dependsOn generateModel
buildPlugin.dependsOn generateModel
