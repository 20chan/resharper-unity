import org.apache.tools.ant.taskdefs.condition.Os
import java.util.regex.Pattern

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.1.51'
    id 'org.jetbrains.intellij' version '0.2.17'
}

group 'com.jetbrains'

wrapper {
    gradleVersion '4.2'
}

if (!ext.has("Source"))
    ext.Source = null

if (!ext.has("BuildCounter"))
    ext.BuildCounter = 9999

if (!ext.has("SinceBuild"))
    ext.SinceBuild = null

if (!ext.has("UntilBuild"))
    ext.UntilBuild = null

if (!ext.has("BuildConfiguration"))
    ext.BuildConfiguration = "Release"

if (!ext.has("NoBuild"))
    ext.NoBuild = false

ext.isWindows = Os.isFamily(Os.FAMILY_WINDOWS)

ext.replaceInFile = { File file, String regex, String replacement ->
    def lines = file.readLines()
    def replaced = lines.collect{
        String line -> line.replaceAll(regex, replacement)
    }

    def fullText = replaced.join("\n")
    file.withOutputStream {
        OutputStream os ->
            os.withWriter{
                Writer w -> w.write(fullText)
            }
            os.flush()
            os.close()
    }

    // TODO: notify if no matches found
}

task setRiderSDKVersion() {
    if (Source == null) {
        logger.lifecycle("Explict SDK version is not set, skipping .props modification")
        return
    }
    // Get package version from folder
    def directory = new File(Source as String)
    def packageName = "JetBrains.Rider.SDK"
    def escapedPackagedName = Pattern.quote(packageName)
    logger.lifecycle("Looking for package $packageName among items:")
    def sdkPackageVersion = directory.listFiles().collect {
        File f ->
            if (f.isDirectory())
                return null

            logger.trace(f.name)
            def match = (f.name =~ /^$escapedPackagedName\.((\d+\.)+\d+((-eap|-snapshot)\d+(internal)?)?)\.nupkg\u0024/)
            if (!match.matches())
                return null

            def matchValue = match[0][1]
            return matchValue
    }.find { String s -> s != null }

    if (sdkPackageVersion == null) {
        throw new InvalidUserDataException("Package $packageName was not found in folder $directory")
    }

    // Set Rider SDK version
    logger.lifecycle("Setting versions:")
    logger.lifecycle("JetBrains.Rider.SDK -> $sdkPackageVersion")
    logger.lifecycle("JetBrains.Rider.SDK.Tests -> $sdkPackageVersion")

    def buildPropsFile = new File("../resharper/Directory.Build.props")
    def sdkPropertyName = "RiderSDKVersion"     // used for logging and checking whether the property exists, actual setting is hardcoded

    logger.lifecycle("- ${buildPropsFile.name}: $sdkPropertyName -> $sdkPackageVersion")

    String regex = "^(\\s*<RiderSDKVersion>)[^<]*(<\\/RiderSDKVersion>)\\s*\$"
    replaceInFile(buildPropsFile, regex, "\$1$sdkPackageVersion\$2")
}

task buildWithBackend {
    dependsOn setRiderSDKVersion
}

sourceSets {
    test {
        java.srcDir 'testSrc'
        resources.srcDir 'testData'
    }
}

intellij {
    type = 'RD'

    // Download a version of Rider to compile and run with. Either set `version` to
    // 'LATEST-TRUNK-SNAPSHOT' or 'LATEST-EAP-SNAPSHOT' or a known version.
    // This will download from www.jetbrains.com/intellij-repository/snapshots or
    // www.jetbrains.com/intellij-repository/releases, respectively.
    // Note that there's no guarantee that these are kept up to date
    // version = 'LATEST-TRUNK-SNAPSHOT'
    // If the build isn't available in intellij-repository, use an installed version via `localPath`
    // localPath = '/Users/matt/Library/Application Support/JetBrains/Toolbox/apps/Rider/ch-1/171.4089.265/Rider EAP.app/Contents'
    // localPath = "C:\\Users\\Ivan.Shakhov\\AppData\\Local\\JetBrains\\Toolbox\\apps\\Rider\\ch-0\\171.4456.459"
    // localPath = "C:\\Users\\ivan.pashchenko\\AppData\\Local\\JetBrains\\Toolbox\\apps\\Rider\\ch-0\\173.3389.392"
    // localPath = '/Users/ivan/Library/Application Support/JetBrains/Toolbox/apps/Rider/ch-1/173.3389.392/Rider EAP.app/Contents'

    def dir = file('dependencies')
    if (dir.exists()) {
        localPath = dir.absolutePath
    } else {
        version = 'LATEST-TRUNK-SNAPSHOT' // Trunk until we have release
    }

    // Sources aren't available for Rider
    downloadSources = false
}

if (!ext.has("myArgs")) {
    ext.myArgs = "Release,2.1.3.9999"
}

ext.args = myArgs.split(',')
ext.configuration = ext.args[0]
ext.version = ext.args[1]

version ext.version

logger.lifecycle("ext.version=$ext.version")
logger.lifecycle("ext.configuration=$ext.configuration")

ext.kotlin_version = '1.1.51'
ext.nupkg_path = "$projectDir/../resharper/build/resharper-unity.rider/bin/$ext.configuration/JetBrains.Unity.$ext.version-rider.nupkg"

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}

assert file(nupkg_path).exists()

prepareSandbox {
    from(nupkg_path, {
        into "$intellij.pluginName"
    })
}

prepareTestingSandbox {
    from(nupkg_path, {
        into "$intellij.pluginName"
    })
}

test {
    useTestNG() {}
    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
    }
}