plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.2.10'
    id 'org.jetbrains.intellij' version '0.2.18'
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib"
}

group 'com.jetbrains'

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

if (System.env['TEAMCITY_VERSION'] != null) {
    ext.ci = new TeamCityService()
    gradle.taskGraph.addTaskExecutionListener(new TeamCityEventLogger(ci))
} else if (System.env['TRAVIS'] != null) {
    ext.ci = new TravisService()
    gradle.taskGraph.addTaskExecutionListener(new TravisEventLogger(ci))
} else {
    ext.ci = new NullService()
}

// Renaming to be more meaningful, but would also require updating build.ps1
// and also the build configuration settings in TeamCity
if (!ext.has("Source"))
    ext.Source = null
ext.PackageSource = ext.Source

if (!ext.has("BuildCounter"))
    ext.BuildCounter = 9999

if (!ext.has("BuildConfiguration")) {
    ext.BuildConfiguration = ext.ci.isBuildingUnderCi ? "Release" : "Debug"
}

if (!ext.has("RiderOnly") || ext.RiderOnly ==~ "(?i)False")
    ext.RiderOnly = false

if (!ext.has("SkipNuGetRestore"))
    ext.SkipNuGetRestore = false

version "2.1.3.$BuildCounter"

logger.lifecycle("version=$version")
logger.lifecycle("Configuration=$BuildConfiguration")

apply from: 'backend.gradle'
apply from: 'frontend.gradle'

task resolveDependencies {
  description 'Resolves all projects dependencies from the repository'
  group 'Build Server'

  doLast {
    rootProject.allprojects { project ->
      project.buildscript.configurations.forEach { configuration ->
        if (configuration.canBeResolved) {
          configuration.resolve()
        }
      }

      project.configurations.forEach { configuration ->
        if (configuration.canBeResolved) {
          configuration.resolve()
        }
      }
    }
  }
}

interface CIService {
    final Boolean isBuildingUnderCi

    void Progress(String message)
    void OpenBlock(String name, String description)
    void CloseBlock(String name)
    void PublishArtifact(File path)
}

class NullService implements CIService {

    final Boolean isBuildingUnderCi = false

    void Progress(String message) {
        println message
    }

    void OpenBlock(String name, String description) { }
    void CloseBlock(String name) { }

    void PublishArtifact(File path) {
        println "Publish: $path.absolutePath"
    }

    void SetBuildNumber(String version) {
        println "Build: $version"
    }
}

class TeamCityService implements CIService {

    final Boolean isBuildingUnderCi = true

    // TODO: These values should be escaped
    void Progress(String message) {
        println "##teamcity[progressMessage '$message']"
    }

    void OpenBlock(String name, String description) {
        println "##teamcity[blockOpened name='$name' description='$description']"
    }

    void CloseBlock(String name) {
        println "##teamcity[blockClosed name='$name']"
    }

    void PublishArtifact(File path) {
        println "##teamcity[publishArtifacts '$path.absolutePath']"
    }

    void SetBuildNumber(String version) {
        println "##teamcity[buildNumber '$version']"
    }
}

class TeamCityEventLogger extends BuildAdapter implements TaskExecutionListener {

    private CIService ci

    TeamCityEventLogger(CIService ci) {
        this.ci = ci
    }

    public void beforeExecute(Task task) {
        ci.Progress("gradle:$task.name")
        ci.OpenBlock("gradle:$task.name", "gradle:$task.name")
    }

    public void afterExecute(Task task, TaskState state) {
        ci.CloseBlock("gradle:$task.name")
    }
}


class TravisService implements CIService {

    final Boolean isBuildingUnderCi = true

    void Progress(String message) {
        println message
    }

    void OpenBlock(String name, String description) {
        println "travis_fold:start:$name\033[33;1m:$description\033[0m"
    }

    void CloseBlock(String name) {
        println "\ntravis_fold:end:$name\r"
    }

    void PublishArtifact(File path) {
        println "Artifact: $path.absolutePath"
    }

    void SetBuildNumber(String version) {
        println "Build number: $version"
    }
}

class TravisEventLogger extends BuildAdapter implements TaskExecutionListener {

    private CIService ci

    TravisEventLogger(CIService ci) {
        this.ci = ci
    }

    public void beforeExecute(Task task) {
        ci.OpenBlock(task.name, task.name)
    }

    public void afterExecute(Task task, TaskState state) {
        ci.CloseBlock(task.name)
    }
}

